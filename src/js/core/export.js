// üìä –ú–û–î–£–õ–¨ –≠–ö–°–ü–û–†–¢–ê –î–ê–ù–ù–´–• –†–ò–°–ö–û–í
import { risksData } from './data.js';

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV
export function convertToCSV(data) {
    const header = data[0];
    const rows = data.slice(1);
    
    const csvContent = [
        header.join(','),
        ...rows.map(row => 
            row.map(cell => `"${cell.replace(/"/g, '""')}"`).join(',')
        )
    ].join('\n');
    
    return csvContent;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
export function createExcelFile(data) {
    // –°–æ–∑–¥–∞–µ–º HTML —Ç–∞–±–ª–∏—Ü—É –¥–ª—è Excel —Å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: —Å–Ω–∞—á–∞–ª–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –ø–æ—Ç–æ–º —Ä–∏—Å–∫–∏
    let excelContent = `
        <html xmlns:o="urn:schemas-microsoft-com:office:office" xmlns:x="urn:schemas-microsoft-com:office:excel" xmlns="http://www.w3.org/TR/REC-html40">
        <head>
            <meta charset="utf-8">
            <!--[if gte mso 9]><xml><x:ExcelWorkbook><x:ExcelWorksheets><x:Name>–ö–∞—Ä—Ç–∞ —Ä–∏—Å–∫–æ–≤</x:Name><x:WorksheetOptions><x:DisplayGridlines/></x:WorksheetOptions></x:ExcelWorksheet></x:ExcelWorksheets></x:ExcelWorkbook></xml><![endif]-->
        </head>
        <body>
            <!-- –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ò–°–ö–ê–ú -->
            <table border="1">
                <tr style="background-color: #2E8B57; color: white; font-weight: bold; font-size: 14px;">
                    <th colspan="2" style="text-align: center; padding: 10px;">–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –†–ò–°–ö–ê–ú</th>
                </tr>
                <tr style="background-color: #F0F8FF;">
                    <td style="font-weight: bold; padding: 8px;">–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤</td>
                    <td style="text-align: center; padding: 8px;">${risksData.length}</td>
                </tr>
                <tr style="background-color: #FFFFFF;">
                    <td style="font-weight: bold; padding: 8px;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–π</td>
                    <td style="text-align: center; padding: 8px;">${getUniqueCategoriesCount()}</td>
                </tr>
                <tr style="background-color: #F0F8FF;">
                    <td style="font-weight: bold; padding: 8px;">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤</td>
                    <td style="text-align: center; padding: 8px; color: #DC2626;">${getRisksByLevel('critical').length}</td>
                </tr>
                <tr style="background-color: #FFFFFF;">
                    <td style="font-weight: bold; padding: 8px;">–í—ã—Å–æ–∫–∏—Ö —Ä–∏—Å–∫–æ–≤</td>
                    <td style="text-align: center; padding: 8px; color: #EF4444;">${getRisksByLevel('high').length}</td>
                </tr>
                <tr style="background-color: #F0F8FF;">
                    <td style="font-weight: bold; padding: 8px;">–°—Ä–µ–¥–Ω–∏—Ö —Ä–∏—Å–∫–æ–≤</td>
                    <td style="text-align: center; padding: 8px; color: #F97316;">${getRisksByLevel('medium').length}</td>
                </tr>
                <tr style="background-color: #FFFFFF;">
                    <td style="font-weight: bold; padding: 8px;">–ù–∏–∑–∫–∏—Ö —Ä–∏—Å–∫–æ–≤</td>
                    <td style="text-align: center; padding: 8px; color: #22C55E;">${getRisksByLevel('low').length}</td>
                </tr>
            </table>
            
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º -->
            <table border="1" style="margin-top: 20px;">
                <tr style="background-color: #4682B4; color: white; font-weight: bold; font-size: 14px;">
                    <th colspan="3" style="text-align: center; padding: 10px;">–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú</th>
                </tr>
                <tr style="background-color: #E6F3FF; font-weight: bold;">
                    <td style="padding: 8px;">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</td>
                    <td style="padding: 8px;">–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–∏—Å–∫–æ–≤</td>
                    <td style="padding: 8px;">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö</td>
                </tr>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    const categoryStats = getCategoryStatistics();
    categoryStats.forEach(stat => {
        excelContent += `
            <tr style="background-color: #FFFFFF;">
                <td style="padding: 8px;">${stat.categoryName}</td>
                <td style="text-align: center; padding: 8px;">${stat.totalRisks}</td>
                <td style="text-align: center; padding: 8px; color: #DC2626;">${stat.criticalRisks}</td>
            </tr>
        `;
    });
    
    excelContent += `
            </table>
            
            <!-- –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ -->
            <table border="1" style="margin-top: 20px;">
                <tr style="background-color: #9370DB; color: white; font-weight: bold; font-size: 14px;">
                    <th colspan="2" style="text-align: center; padding: 10px;">–°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–û –í–ï–†–û–Ø–¢–ù–û–°–¢–ò</th>
                </tr>
                <tr style="background-color: #F0F8FF;">
                    <td style="font-weight: bold; padding: 8px;">–í—ã—Å–æ–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</td>
                    <td style="text-align: center; padding: 8px; color: #DC2626;">${getRisksByProbability('–í—ã—Å–æ–∫–∞—è').length}</td>
                </tr>
                <tr style="background-color: #FFFFFF;">
                    <td style="font-weight: bold; padding: 8px;">–°—Ä–µ–¥–Ω—è—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</td>
                    <td style="text-align: center; padding: 8px; color: #F97316;">${getRisksByProbability('–°—Ä–µ–¥–Ω—è—è').length}</td>
                </tr>
                <tr style="background-color: #F0F8FF;">
                    <td style="font-weight: bold; padding: 8px;">–ù–∏–∑–∫–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å</td>
                    <td style="text-align: center; padding: 8px; color: #22C55E;">${getRisksByProbability('–ù–∏–∑–∫–∞—è').length}</td>
                </tr>
            </table>
            
            <!-- –¢–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤ -->
            <table border="1" style="margin-top: 20px;">
                <tr style="background-color: #DC2626; color: white; font-weight: bold; font-size: 14px;">
                    <th colspan="2" style="text-align: center; padding: 10px;">–¢–û–ü-5 –ö–†–ò–¢–ò–ß–ï–°–ö–ò–• –†–ò–°–ö–û–í</th>
                </tr>
                <tr style="background-color: #FEE2E2; font-weight: bold;">
                    <td style="padding: 8px;">–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–∏—Å–∫–∞</td>
                    <td style="padding: 8px;">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</td>
                </tr>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-5 –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–∏—Å–∫–æ–≤
    const criticalRisks = getRisksByLevel('critical').slice(0, 5);
    criticalRisks.forEach((risk, index) => {
        excelContent += `
            <tr style="background-color: #FFFFFF;">
                <td style="padding: 8px;">${index + 1}. ${risk.title}</td>
                <td style="padding: 8px;">${risk.categoryName}</td>
            </tr>
        `;
    });
    
    excelContent += `
            </table>
            
            <!-- –†–ê–ó–î–ï–õ–ò–¢–ï–õ–¨ -->
            <div style="height: 30px;"></div>
            
            <!-- –ü–û–õ–ù–´–ô –°–ü–ò–°–û–ö –†–ò–°–ö–û–í -->
            <table border="1">
                <tr style="background-color: #34495E; color: white; font-weight: bold;">
                    ${data[0].map(header => `<th>${header}</th>`).join('')}
                </tr>
    `;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ä–∏—Å–∫–∏
    for (let i = 1; i < data.length; i++) {
        const row = data[i];
        const isNewCategory = row[0] !== '';
        const bgColor = isNewCategory ? getRowColor(row[0]) : '#ffffff';
        
        excelContent += `<tr style="background-color: ${bgColor};">`;
        row.forEach(cell => {
            excelContent += `<td>${cell}</td>`;
        });
        excelContent += '</tr>';
    }
    
    excelContent += `
            </table>
        </body>
        </html>
    `;
    
    return excelContent;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–≤–µ—Ç–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
function getRowColor(category) {
    const colors = {
        '–û–ø–µ—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏': '#E8F8F5',
        '–ö–∞–¥—Ä–æ–≤—ã–µ –∏ HR —Ä–∏—Å–∫–∏': '#FEF9E7',
        '–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–µ —Ä–∏—Å–∫–∏': '#FADBD8',
        '–†–µ–ø—É—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥–æ–≤—ã–µ —Ä–∏—Å–∫–∏': '#EBF5FB',
        '–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∏ –∫–æ–º–ø–ª–∞–µ–Ω—Å': '#F4ECF7',
        '–í–Ω–µ—à–Ω–∏–µ —Ä–∏—Å–∫–∏': '#E8F6F3'
    };
    return colors[category] || '#ffffff';
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —á–∏—Ç–∞–µ–º–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
function getRiskLevelName(level) {
    const levelNames = {
        'critical': '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π',
        'high': '–í—ã—Å–æ–∫–∏–π',
        'medium': '–°—Ä–µ–¥–Ω–∏–π',
        'low': '–ù–∏–∑–∫–∏–π'
    };
    return levelNames[level] || level;
}

// –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function getUniqueCategoriesCount() {
    const uniqueCategories = new Set(risksData.map(risk => risk.categoryName));
    return uniqueCategories.size;
}

function getRisksByLevel(level) {
    return risksData.filter(risk => risk.level === level);
}

function getRisksByProbability(probability) {
    return risksData.filter(risk => risk.probability === probability);
}

function getCategoryStatistics() {
    const categoryMap = new Map();
    
    risksData.forEach(risk => {
        if (!categoryMap.has(risk.categoryName)) {
            categoryMap.set(risk.categoryName, {
                categoryName: risk.categoryName,
                totalRisks: 0,
                criticalRisks: 0
            });
        }
        
        const stat = categoryMap.get(risk.categoryName);
        stat.totalRisks++;
        
        if (risk.level === 'critical') {
            stat.criticalRisks++;
        }
    });
    
    return Array.from(categoryMap.values());
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
export function prepareExportData() {
    const exportData = [
        ["–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ä–∏—Å–∫–∞", "–†–∏—Å–∫", "–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", "–í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å", "–ü–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è", "–ú–µ—Ä—ã –º–∏—Ç–∏–≥–∞—Ü–∏–∏"]
    ];
    
    let currentCategory = '';
    
    risksData.forEach(risk => {
        // –ï—Å–ª–∏ —ç—Ç–æ –Ω–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è, –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
        if (risk.categoryName !== currentCategory) {
            currentCategory = risk.categoryName;
            exportData.push([
                currentCategory,
                risk.title,
                getRiskLevelName(risk.level),
                risk.probability,
                risk.consequences,
                risk.mitigation
            ]);
        } else {
            // –ü–æ–¥–ø—É–Ω–∫—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
            exportData.push([
                '',
                risk.title,
                getRiskLevelName(risk.level),
                risk.probability,
                risk.consequences,
                risk.mitigation
            ]);
        }
    });
    
    return exportData;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è Excel —Ñ–∞–π–ª–∞
export function downloadExcel() {
    const exportData = prepareExportData();
    const excelContent = createExcelFile(exportData);
    const blob = new Blob([excelContent], { 
        type: 'application/vnd.ms-excel;charset=utf-8;' 
    });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = '–ö–∞—Ä—Ç–∞_—Ä–∏—Å–∫–æ–≤_–≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ_2025.xls';
    link.style.display = 'none';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è CSV —Ñ–∞–π–ª–∞
export function downloadCSV() {
    const exportData = prepareExportData();
    const csvContent = convertToCSV(exportData);
    const blob = new Blob(['\ufeff' + csvContent], { 
        type: 'text/csv;charset=utf-8;' 
    });
    
    const link = document.createElement('a');
    link.href = URL.createObjectURL(blob);
    link.download = '–ö–∞—Ä—Ç–∞_—Ä–∏—Å–∫–æ–≤_–≥–æ—Å—Ç–µ–ø—Ä–∏–∏–º—Å—Ç–≤–æ_2025.csv';
    link.style.display = 'none';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
}
