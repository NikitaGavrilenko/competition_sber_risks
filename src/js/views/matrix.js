import { getFilteredRisks, getRisksInCell } from '../filters/riskFilters.js';
import { getRiskLevel, getProbabilityLabel, getImpactLabel, getRiskCountText, getRiskLevelName } from '../core/utils.js';
import { showRisksInCell } from '../ui/modal.js';

// üìä –ó–ê–ì–†–£–ó–ö–ê –ú–ê–¢–†–ò–¶–´ –†–ò–°–ö–û–í
export function loadMatrixView() {
    console.log('loadMatrixView –≤—ã–∑–≤–∞–Ω–∞');
    const matrixGrid = document.getElementById('matrixGrid');
    if (!matrixGrid) {
        console.error('–≠–ª–µ–º–µ–Ω—Ç matrixGrid –Ω–µ –Ω–∞–π–¥–µ–Ω');
        return;
    }
    matrixGrid.innerHTML = '';
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
    const headerRow = document.createElement('div');
    headerRow.className = 'matrix-row header-row';
    
    // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–ª—è –ª–µ–≤–æ–≥–æ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É–≥–ª–∞
    const emptyCell = document.createElement('div');
    emptyCell.className = 'matrix-label empty';
    headerRow.appendChild(emptyCell);
    
    // –ó–∞–≥–æ–ª–æ–≤–∫–∏ —Å—Ç–æ–ª–±—Ü–æ–≤ (–≤–æ–∑–¥–µ–π—Å—Ç–≤–∏–µ)
    for (let i = 1; i <= 5; i++) {
        const headerCell = document.createElement('div');
        headerCell.className = 'matrix-label';
        headerCell.innerHTML = `
            <div style="font-size: 1.2rem; font-weight: 700;">${i}</div>
            <small>${getImpactLabel(i)}</small>
        `;
        headerRow.appendChild(headerCell);
    }
    matrixGrid.appendChild(headerRow);
    
    // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    for (let prob = 5; prob >= 1; prob--) {
        const row = document.createElement('div');
        row.className = 'matrix-row';
        
        // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–æ–∫–∏ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
        const rowHeader = document.createElement('div');
        rowHeader.className = 'matrix-label';
        rowHeader.innerHTML = `
            <div style="font-size: 1.2rem; font-weight: 700;">${prob}</div>
            <small>${getProbabilityLabel(prob)}</small>
        `;
        row.appendChild(rowHeader);
        
        // –Ø—á–µ–π–∫–∏ –º–∞—Ç—Ä–∏—Ü—ã
        for (let impact = 1; impact <= 5; impact++) {
            const cell = document.createElement('div');
            const cellKey = `${prob}-${impact}`;
            const risksInCell = getRisksInCell(prob, impact);
            const riskLevel = getRiskLevel(prob, impact);
            

            
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —è—á–µ–π–∫–∏
            let cellClasses = `matrix-cell ${riskLevel}`;
            if (risksInCell.length === 0) {
                cellClasses += ' empty-cell';
            } else if (risksInCell.length > 1) {
                cellClasses += ' multiple-risks';
            }
            
            cell.className = cellClasses;
            cell.onclick = () => window.showRisksInCell(prob, impact, risksInCell);
            
            if (risksInCell.length > 0) {
                // –Ø—á–µ–π–∫–∞ —Å —Ä–∏—Å–∫–∞–º–∏
                cell.innerHTML = `
                    <div class="risk-count">${risksInCell.length}</div>
                    <div class="risk-label">${getRiskCountText(risksInCell.length)}</div>
                `;
                cell.title = `${getRiskLevelName(riskLevel)} —Ä–∏—Å–∫ - ${risksInCell.length} ${getRiskCountText(risksInCell.length)}`;
                
                // –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç –¥–ª—è —Å—á–µ—Ç—á–∏–∫–∞ –≤ –ø—Ä–∞–≤–æ–º –≤–µ—Ä—Ö–Ω–µ–º —É–≥–ª—É
                if (risksInCell.length > 1) {
                    cell.setAttribute('data-count', risksInCell.length);
                }
            } else {
                // –ü—É—Å—Ç–∞—è —è—á–µ–π–∫–∞
                cell.innerHTML = `
                    <div class="risk-count">0</div>
                    <div class="risk-label">—Ä–∏—Å–∫–æ–≤</div>
                `;
                cell.title = '–ù–µ—Ç —Ä–∏—Å–∫–æ–≤ –≤ –¥–∞–Ω–Ω–æ–π —è—á–µ–π–∫–µ';
            }
            
            row.appendChild(cell);
        }
        
        matrixGrid.appendChild(row);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –ª–µ–≥–µ–Ω–¥—É –ø–æ–¥ –º–∞—Ç—Ä–∏—Ü–µ–π
    const legendRow = document.createElement('div');
    legendRow.className = 'matrix-legend';
    legendRow.style.cssText = 'grid-column: 1 / -1; display: flex; justify-content: center; gap: 2rem; margin-top: 1rem; padding: 1rem; background: var(--light-2); border-radius: var(--border-radius); border: 1px solid var(--light-4);';
    
    const legendItems = [
        { class: 'critical', label: '–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫' },
        { class: 'high', label: '–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫' },
        { class: 'medium', label: '–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫' },
        { class: 'low', label: '–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫' }
    ];
    
    legendItems.forEach(item => {
        const legendItem = document.createElement('div');
        legendItem.style.cssText = 'display: flex; align-items: center; gap: 0.5rem; font-size: 0.8rem; font-weight: 500; color: var(--dark-2);';
        
        const colorBox = document.createElement('div');
        colorBox.style.cssText = `width: 16px; height: 16px; border-radius: 4px; background: var(--${item.class}-bg); border: 2px solid var(--${item.class});`;
        
        legendItem.appendChild(colorBox);
        legendItem.appendChild(document.createTextNode(item.label));
        legendRow.appendChild(legendItem);
    });
    
    matrixGrid.appendChild(legendRow);
}
